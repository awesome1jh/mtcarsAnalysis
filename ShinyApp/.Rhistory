.5*(edh+edl)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5^2
sum(dice_high*dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3)*(.8^3)*(.2^2) + choose(5,4)*(.8^4)*(.2^1) + choose(5,5)*(.8^5)
pbinom(2,5,.8, lower.tail=FALSE)
qnorm(.1)
0
qnorm(.975, mean=3, sd=2)
3 + 1.96*2
pnorm(1200, mean=1020, sd = 50, lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(prob = .75, mean = 1020, sd = 50, lower.tail=TRUE)
qnorm(.75, mean = 1020, sd = 50, lower.tail=TRUE)
.53
.53
ppois(3, lambda = 2.5*4)
pbinom(5,n=1000, prob = 0.01)
pbinom(5,1000, 0.01)
ppois(5,lambda = 1000*0.01)
coinPlot(10)
coinPlot(10000)
qnorm(.95)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
x$conf.int
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(lamb)$conf
poisson.test(5, 94.32)$conf
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2-g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf.int
sp <- 7*15.34^2 + 20*18.23^2
ns <- 27
sp <- sqrt(sp/ns)
132.86-127.44 + c(-1,1)*qt(.975,ns)*sp*sum(1/8 + 1/21)
132.86-127.44 + c(-1,1)*qt(.975,ns)*sp*sqrt(1/8 + 1/21)
sp <- sqrt((var(g1)*9 + var(g2)*9)/18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md +c(-1,1)*t(.975,18)*sp*sqrt(1/10 + 1/10)
md +c(-1,1)*qt(.975,18)*sp*sqrt(1/10 + 1/10)
t.test(g2,g1,paired=FALSE, var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
132.86-127.44 + c(-1,1)*qt(.975,mydf)*num^(1/4)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
1
2
2/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885*sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
7
8
pt(2.5,15)
pt(2.5,15,lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2,lower.tail=TRUE)
pnorm(2,lower.tail=F)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6,size=8, prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,lambda=5,lower.tail=FALSE)
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z,mean=30, lower.tail=FALSE)
pnorm(30+z,mean=32, lower.tail=FALSE)
pnorm(30+z,mean=32, sd=1, lower.tail=FALSE)
pnorm(30+z,mean=32, sd=2, lower.tail=FALSE)
pnorm(30+z*2,mean=32, sd=2, lower.tail=FALSE)
power.t.test(n=16, delta = 2 /4, sd = 1, type="one.sample", alt="one.sided")$power
power.t.test(n=16, delta = 2, sd = 4, type="one.sample", alt="one.sided")$power
power.t.test(n=16, delta = 100, sd = 200, type="one.sample", alt="one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power=0.8, n = 26, sd = 1)$delta
power.t.test(power=0.8, n = 26, sd = 1, type="one.sample", alt="one.sided")$delta
power.t.test(power=0.8, n = 27, sd = 1, type="one.sample", alt="one.sided")$delta
head(pValues)
sum(pValues < .05)
sum(p.adjust(pValues,method="bonferroni")>.05)
sum(p.adjust(pValues,method="bonferroni")<.05)
sum(p.adjust(pValues,method="BH")<.05)
tail(trueStatus)
table(pValues2 < .05, trueStatus)
0
24/500
table(p.adjust(pValues2,method="bonferroni") < .05, trueStatus)
table(p.adjust(pValues2,method="BH") < .05, trueStatus)
sum(c(1:6))/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, size = nh*B, replace=TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam,1,median)
median(fh) - meidan(meds)
median(fh) - median(meds)
sd(meds)
ds(resampledMedians)
sd(resampledMedians)
quantile(resampledMedians, c(0.025,0.975))
quantile(meds, c(0.025,0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
x<-c(0.18, -1.54, 0.42, 0.95)
w <- c(2,1,3,1)
r <- sum(w*(x-.1471)^2)
r
r <- sum(w*(x-.3)^2)
r
r <- sum(w*(x-.0025)^2)
r
r <- sum(w*(x-1.077)^2)
r
mean(x)
mean(w*x)
mean(sqrt(w)*x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
z<-c(0.18, -1.54, 0.42, 0.95)
coef(lm(y~x -1))
data(mtcars)
coef(lm(mtcars$mpg ~ mtcars$weight) )
coef(lm(mtcars$mpg ~ mtcars$weight))
View(mtcars)
coef(lm(mtcars$mpg ~ mtcars$wt))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m <- mean(x)
s <- sd(x)
(x-m)/s
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y~x))
mean(x)
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child~parent,galton)
plot(jitter(child,4)~parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
fit <- lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
library(swirl)
swirl()
plot(child~parent,galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent,galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
fit <- lm(child ~ parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
Here are the vectors of variations or tweaks
sltweak <- c(.01, .02, .03, -.01, -.02, -.03) #one for the slope
ictweak <- c(.1, .2, .3, -.1, -.2, -.3)  #one for the intercept
lhs <- numeric()
rhs <- numeric()
#left side of eqn is the sum of squares of residuals of the tweaked regression line
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
#right side of eqn is the sum of squares of original residuals + sum of squares of two tweaks
for (n in 1:6) rhs[n] <- sqe(ols.slope,ols.ic) + sum(est(sltweak[n],ictweak[n])^2)
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(child)
View(galton)
var(galton$child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor, gpa_nor)
l_nor <- lm(gch_nor~ gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
m <- .1471
sum(w*(x-m)^2)
m <- 1.077
sum(w*(x-m)^2)
m <- .3
sum(w*(x-m)^2)
m <- .0025
sum(w*(x-m)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x-1)
data(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit)
x
mean(x)
y
fit2 <- lm(y~x)
summary(fit2)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(8.58-mean(x))/sd(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
fit2 <- lm(mpg ~ wt, data=mtcars)
summary(fit2)
mean(mtcars$wt)
m <- mean(mtcars$wt)
predict(fit2,newdata=m,interval="confidence")
predict(fit2,newdata=data.frame(wt=m),interval="confidence")
m2 <- 3
predict(fit2,newdata=data.frame(wt=m2),interval="confidence")
predict(fit2,newdata=data.frame(wt=m2),interval="prediction")
confint(fit)[2]
confint(fit)[2,]
confint(fit)[2,]*2
fit <- lm(mpg ~ wt, data=mtcars)
confint(fit)[2,]*2
confint(fit)
library(swirl)
swirl()
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(sTot)
help()
sRes <- deviance(fit,sTot)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
(cor(child,parent, data=galton))^2
(cor(galton$child,galton$parent))^2
cor(galton$child,galton$parent)^2
library(swirl)
swirl()
ones <- rep(1,nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Education, Examination, data=swiss )
cor(Education, Examination, swiss )
cor(swiss$Education, swiss$Examination)
cor(swiss$Education, swiss$Agriculture)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sB
summary(sB[,2])
summary(sB)[,2]
summary[,2](sB)
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray2, InsectSprays )
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric, Year, hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric ~ [hunger$Sex=="Female"], hunger)
lmF <- lm(Numeric ~ hunger$Sex=="Female", hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"], hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"], hunger)
lmBoth <- lm(Numeric, Year + Sex, hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidify','ramnathv/slidify')
install_github('slidifyLibraries','ramnathv')
library(slidify)
install_github('slidify','ramnathv')
library(slidify)
install_github("slidify","ramnathv")
library(swirl)
swirl()
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(sum(fit$residuals^2)/fit$df.residuals)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- residual(fit)/(sigma*sqrt(1-hatvalues(fit)))
rstd <- residuals(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit))
)
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
View(swiss)
mdl(Fertility ~ .,swiss)
mdl <- lm(Fertility ~ .,swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ .-Examination,swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
setwd("~/Academia/DataScience/DataProducts/Shiny1")
library(shinyapps)
library(shiny)
runApp()
names(mtcars)
runApp()
setwd("~/Academia/DataScience/Projects/DataProducts/ShinyApp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
names(mtcars)[[2]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fit <- lm(mpg~wt, data=mtcars)
fit$coefficients
runApp()
runApp()
runApp()
runApp()
fit$coefficients[2]
fit$coefficients[[2]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(devtools)
?stat_smooth_func
library(ggplot2)
?stat_smooth_func
?stat_smooth
summary(fit)
names(fit)
fit$qr
fit$model
head(fit)
class(summary(fit))
summary(fit)$r.squared
runApp()
runApp()
runApp()
runApp()
output$lmR2 <- renderPrint({
fit <- lm(y ~ x, data=dataset)
print(summary(fit)$r.squared)
})
lmR2 <- renderPrint({
fit <- lm(y ~ x, data=dataset)
print(summary(fit)$r.squared)
})
lmR2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?session$sendCustomMessage
?session
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(devtools)
install_github('rstudio/packrat')
runApp()
